"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _injectscript = require("./utils/injectscript");

var _proptypes = require("./proptypes");

var _preventGoogleFonts = require("./utils/prevent-google-fonts");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var cleaningUp = false;

var LoadScript =
/*#__PURE__*/
function (_Component) {
  _inherits(LoadScript, _Component);

  function LoadScript() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, LoadScript);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoadScript)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      loaded: false
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "check", _react.default.createRef());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentDidMount",
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(window.google && !cleaningUp)) {
                _context.next = 3;
                break;
              }

              console.error("google api is already presented");
              return _context.abrupt("return");

            case 3:
              _context.next = 5;
              return _this.isCleaningUp();

            case 5:
              _this.injectScript();

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    })));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentDidUpdate", function (prevProps) {
      if (prevProps.language !== _this.props.language) {
        _this.cleanup();

        _this.setState(function () {
          return {
            loaded: false
          };
        }, function () {
          delete window.google;

          _this.injectScript();
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentWillUnmount", function () {
      _this.cleanup();

      setTimeout(function () {
        if (!_this.check.current) {
          delete window.google;
          cleaningUp = false;
        }
      }, 1);

      _this.props.onUnmount();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isCleaningUp", function () {
      return new Promise(function (resolve) {
        if (!cleaningUp) {
          resolve();
        } else {
          var timer = setInterval(function () {
            if (!cleaningUp) {
              clearInterval(timer);
              resolve();
            }
          }, 1);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cleanup", function () {
      cleaningUp = true;
      var script = document.getElementById(_this.props.id);
      script.parentNode.removeChild(script);
      Array.prototype.slice.call(document.getElementsByTagName('script')).filter(function (script) {
        return script.src.includes('maps.googleapis');
      }).forEach(function (script) {
        script.parentNode.removeChild(script);
      });
      Array.prototype.slice.call(document.getElementsByTagName('link')).filter(function (link) {
        return link.href === 'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Google+Sans';
      }).forEach(function (link) {
        link.parentNode.removeChild(link);
      });
      Array.prototype.slice.call(document.getElementsByTagName('style')).filter(function (style) {
        return style.innerText.includes('.gm-');
      }).forEach(function (style) {
        style.parentNode.removeChild(style);
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "injectScript", function () {
      var _this$props = _this.props,
          id = _this$props.id,
          googleMapsApiKey = _this$props.googleMapsApiKey,
          language = _this$props.language,
          region = _this$props.region,
          version = _this$props.version,
          libraries = _this$props.libraries,
          preventGoogleFontsLoading = _this$props.preventGoogleFontsLoading;

      if (preventGoogleFontsLoading) {
        (0, _preventGoogleFonts.preventGoogleFonts)();
      }

      (0, _injectscript.injectScript)({
        id: id,
        url: "https://maps.googleapis.com/maps/api/js?v=".concat(version, "&key=").concat(googleMapsApiKey, "&language=").concat(language, "&region=").concat(region).concat(libraries ? "&libraries=".concat(libraries.join(',')) : ''),
        onSuccess: function onSuccess() {
          _this.props.onLoad();

          _this.setState(function () {
            return {
              loaded: true
            };
          });
        },
        onError: function onError() {
          throw new Error("\nThere has been an Error with loading Google Maps API script, please check that you provided all required props to <LoadScript />\nProps you have provided:\n\ngoogleMapsApiKey: ".concat(_this.props.googleMapsApiKey, "\nlanguage: ").concat(_this.props.language, "\nregion: ").concat(_this.props.region, "\nversion: ").concat(_this.props.version, "\nlibraries: ").concat((_this.props.libraries || []).join(','), "\n\nOtherwise it is a Network issues.\n"));
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "render", function () {
      return _react.default.createElement("div", {
        ref: _this.check
      }, _this.state.loaded ? _this.props.children : _this.props.loadingElement);
    });

    return _this;
  }

  return LoadScript;
}(_react.Component);

_defineProperty(LoadScript, "defaultProps", {
  onLoad: function onLoad() {},
  onError: function onError() {},
  onUnmount: function onUnmount() {}
});

var _default = LoadScript;
exports.default = _default;