"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OverlayView = void 0;

var _react = require("react");

var _reactDom = require("react-dom");

var _invariant = _interopRequireDefault(require("invariant"));

var _helper = require("../../utils/helper");

var _mapContext = _interopRequireDefault(require("../../map-context"));

var _helper2 = require("./helper");

var _proptypes = require("../../proptypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var eventMap = {};
var updaterMap = {};

var OverlayView =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(OverlayView, _PureComponent);

  function OverlayView() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, OverlayView);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OverlayView)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "registeredEvents", []);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      overlayView: null
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentDidMount", function () {
      var overlayView = new google.maps.OverlayView(Object.assign({
        map: _this.context
      }, _this.props.options)); // You must implement three methods: onAdd(), draw(), and onRemove().

      overlayView.onAdd = _this.onAdd;
      overlayView.draw = _this.draw;
      overlayView.onRemove = _this.onRemove;
      overlayView.setMap(_this.context); // You must call setMap() with a valid Map object to trigger the call to
      // the onAdd() method and setMap(null) in order to trigger the onRemove() method.

      _this.setState(function () {
        return {
          overlayView: overlayView
        };
      }, function () {
        _this.registeredEvents = (0, _helper.applyUpdatersToPropsAndRegisterEvents)({
          updaterMap: updaterMap,
          eventMap: eventMap,
          prevProps: {},
          nextProps: _this.props,
          instance: _this.state.overlayView
        });
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentDidUpdate", function (prevProps) {
      (0, _helper.unregisterEvents)(_this.registeredEvents);
      _this.registeredEvents = (0, _helper.applyUpdatersToPropsAndRegisterEvents)({
        updaterMap: updaterMap,
        eventMap: eventMap,
        prevProps: prevProps,
        nextProps: _this.props,
        instance: _this.state.overlayView
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentWillUnmount", function () {
      (0, _helper.unregisterEvents)(_this.registeredEvents);
      _this.state.overlayView && _this.state.overlayView.setMap(null);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "render", function () {
      return _this.containerElement ? (0, _reactDom.createPortal)(_react.Children.only(_this.props.children), _this.containerElement) : null;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "preventMapHitsAndGesturesFrom", function (element) {
      return _this.state.overlayView.preventMapHitsAndGesturesFrom(element);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "preventMapHitsFrom", function (element) {
      return _this.state.overlayView.preventMapHitsFrom(element);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "draw", function () {
      var mapPaneName = _this.props.mapPaneName;
      (0, _invariant.default)(!!mapPaneName, "OverlayView requires either props.mapPaneName or props.defaultMapPaneName but got %s", mapPaneName);
      var overlayView = _this.state.overlayView;

      if (!overlayView) {
        return;
      } // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapPanes


      var mapPanes = overlayView.getPanes();

      if (!mapPanes) {
        return;
      }

      mapPanes[mapPaneName].appendChild(_this.containerElement);

      _this.onPositionElement();

      _this.forceUpdate();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getMap", function () {
      return _this.state.overlayView.getMap();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getPanes", function () {
      return _this.state.overlayView.getPanes();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getProjection", function () {
      return _this.state.overlayView.getProjection();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onAdd", function () {
      _this.containerElement = document.createElement('div');
      _this.containerElement.style.position = 'absolute';
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onPositionElement", function () {
      var mapCanvasProjection = _this.state.overlayView.getProjection();

      var offset = _objectSpread({
        x: 0,
        y: 0
      }, (0, _helper2.getOffsetOverride)(_this.containerElement, _this.props));

      var layoutStyles = (0, _helper2.getLayoutStyles)(mapCanvasProjection, offset, _this.props);
      Object.assign(_this.containerElement.style, layoutStyles);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onRemove", function () {
      if (_this.containerElement) {
        _this.containerElement.parentNode.removeChild(_this.containerElement);
      }

      _this.containerElement = null;
    });

    return _this;
  }

  return OverlayView;
}(_react.PureComponent);

exports.OverlayView = OverlayView;

_defineProperty(OverlayView, "FLOAT_PANE", "floatPane");

_defineProperty(OverlayView, "MAP_PANE", "mapPane");

_defineProperty(OverlayView, "MARKER_LAYER", "markerLayer");

_defineProperty(OverlayView, "OVERLAY_LAYER", "overlayLayer");

_defineProperty(OverlayView, "OVERLAY_MOUSE_TARGET", "overlayMouseTarget");

_defineProperty(OverlayView, "contextType", _mapContext.default);

var _default = OverlayView;
exports.default = _default;