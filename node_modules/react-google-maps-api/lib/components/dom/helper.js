"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLayoutStyles = exports.getOffsetOverride = void 0;

/* eslint-disable filenames/match-regex */

/* global google */
var getOffsetOverride = function getOffsetOverride(containerElement, props) {
  return typeof props.getPixelPositionOffset === 'function' ? props.getPixelPositionOffset(containerElement.offsetWidth, containerElement.offsetHeight) : {};
};

exports.getOffsetOverride = getOffsetOverride;

var createLatLng = function createLatLng(inst, Type) {
  return new Type(inst.lat, inst.lng);
};

var createLatLngBounds = function createLatLngBounds(inst, Type) {
  return new Type(new google.maps.LatLng(inst.ne.lat, inst.ne.lng), new google.maps.LatLng(inst.sw.lat, inst.sw.lng));
};

var ensureOfType = function ensureOfType(inst, type, factory) {
  return inst instanceof type ? inst : factory(inst, type);
};

var getLayoutStylesByBounds = function getLayoutStylesByBounds(mapCanvasProjection, offset, bounds) {
  var ne = mapCanvasProjection.fromLatLngToDivPixel(bounds.getNorthEast());
  var sw = mapCanvasProjection.fromLatLngToDivPixel(bounds.getSouthWest());

  if (ne && sw) {
    return {
      left: "".concat(sw.x + offset.x, "px"),
      top: "".concat(ne.y + offset.y, "px"),
      width: "".concat(ne.x - sw.x - offset.x, "px"),
      height: "".concat(sw.y - ne.y - offset.y, "px")
    };
  }

  return {
    left: '-9999px',
    top: '-9999px'
  };
};

var getLayoutStylesByPosition = function getLayoutStylesByPosition(mapCanvasProjection, offset, position) {
  var point = mapCanvasProjection.fromLatLngToDivPixel(position);

  if (point) {
    var x = point.x,
        y = point.y;
    return {
      left: "".concat(x + offset.x, "px"),
      top: "".concat(y + offset.y, "px")
    };
  }

  return {
    left: '-9999px',
    top: '-9999px'
  };
};

var getLayoutStyles = function getLayoutStyles(mapCanvasProjection, offset, _ref) {
  var bounds = _ref.bounds,
      position = _ref.position;
  return bounds !== undefined ? getLayoutStylesByBounds(mapCanvasProjection, offset, ensureOfType(bounds, google.maps.LatLngBounds, createLatLngBounds)) : getLayoutStylesByPosition(mapCanvasProjection, offset, ensureOfType(position, google.maps.LatLng, createLatLng));
};

exports.getLayoutStyles = getLayoutStyles;