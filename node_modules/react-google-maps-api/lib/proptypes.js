"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DirectionsServicePropTypes = exports.DirectionsRendererPropTypes = exports.LoadScriptPropTypes = exports.GoogleMapPropTypes = exports.GroundOverlayPropTypes = exports.TrafficLayerPropTypes = exports.BicyclingLayerPropTypes = exports.MarkerWithLabelPropTypes = exports.MarkerClusterPropTypes = exports.MarkerPropTypes = exports.StreetViewPanoramaPropTypes = exports.HeatmapLayerPropTypes = exports.InfoBoxPropTypes = exports.InfoWindowPropTypes = exports.DrawingManagerPropTypes = exports.SearchBoxPropTypes = exports.AutocompletePropTypes = exports.ImageMapTypePropTypes = exports.FusionTablesLayerPropTypes = exports.KmlLayerPropTypes = exports.OverlayViewPropTypes = exports.DataPropTypes = exports.CirclePropTypes = exports.RectanglePropTypes = exports.PolygonPropTypes = exports.PolylinePropTypes = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PointInterface = {
  x: _propTypes.default.number,
  y: _propTypes.default.number,
  equals: _propTypes.default.func,
  toString: _propTypes.default.func
};
var LatLngInterface = {
  equals: _propTypes.default.func,
  lat: _propTypes.default.func,
  lng: _propTypes.default.func,
  toJSON: _propTypes.default.func,
  toString: _propTypes.default.func,
  toUrlValue: _propTypes.default.func
};
var LatLngLiteralInterface = {
  lat: _propTypes.default.number,
  lng: _propTypes.default.number
};
var PlaceInterface = {
  location: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]),
  placeId: _propTypes.default.string,
  query: _propTypes.default.string
};
var SizeInterface = {
  width: _propTypes.default.number,
  height: _propTypes.default.number,
  widthUnit: _propTypes.default.string,
  heightUnit: _propTypes.default.string
};
var SymbolInterface = {
  anchor: _propTypes.default.shape(PointInterface),
  fillColor: _propTypes.default.string,
  fillOpacity: _propTypes.default.number,
  labelOrigin: _propTypes.default.shape(PointInterface),
  path: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  rotation: _propTypes.default.number,
  scale: _propTypes.default.number,
  strokeColor: _propTypes.default.string,
  strokeOpacity: _propTypes.default.number,
  strokeWeight: _propTypes.default.number
};
var MVCArrayInterface = {
  clear: _propTypes.default.func,
  forEach: _propTypes.default.func,
  getArray: _propTypes.default.func,
  getAt: _propTypes.default.func,
  getLength: _propTypes.default.func,
  insertAt: _propTypes.default.func,
  pop: _propTypes.default.func,
  push: _propTypes.default.func,
  removeAt: _propTypes.default.func,
  setAt: _propTypes.default.func
};
var MapTypeRegistryInterface = {
  set: _propTypes.default.func
};
var FullscreenControlOptionsInterface = {
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT'])
};
var MapTypeControlOptionsInterface = {
  mapTypeIds: _propTypes.default.arrayOf(_propTypes.default.string),
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT']),
  style: _propTypes.default.oneOf(['DEFAULT', 'DROPDOWN_MENU', 'HORIZONTAL_BAR'])
};
var PanControlOptionsInterface = {
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT'])
};
var RotateControlOptionsInterface = {
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT'])
};
var ScaleControlOptionsInterface = {
  style: _propTypes.default.oneOf(['DEFAULT'])
};
var StreetViewAddressControlOptionsInterface = {
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT'])
};
var MotionTrackingControlOptionsInterface = {
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT'])
};
var StreetViewPovInterface = {
  heading: _propTypes.default.number,
  pitch: _propTypes.default.number
};
var ZoomControlOptionsInterface = {
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT'])
};
var StreetViewControlOptionsInterface = {
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT'])
};
var LatLngBoundsInterface = {
  contains: _propTypes.default.func,
  equals: _propTypes.default.func,
  extend: _propTypes.default.func,
  getCenter: _propTypes.default.func,
  getNorthEast: _propTypes.default.func,
  getSouthWest: _propTypes.default.func,
  intersects: _propTypes.default.func,
  isEmpty: _propTypes.default.func,
  toJSON: _propTypes.default.func,
  toSpan: _propTypes.default.func,
  toString: _propTypes.default.func,
  toUrlValue: _propTypes.default.func,
  union: _propTypes.default.func
};
var LatLngBoundsLiteralInterface = {
  east: _propTypes.default.number,
  north: _propTypes.default.number,
  south: _propTypes.default.number,
  west: _propTypes.default.number
};
var DataInterface = {
  add: _propTypes.default.func,
  addGeoJson: _propTypes.default.func,
  contains: _propTypes.default.func,
  forEach: _propTypes.default.func,
  getControlPosition: _propTypes.default.func,
  getControls: _propTypes.default.func,
  getDrawingMode: _propTypes.default.func,
  getFeatureById: _propTypes.default.func,
  getMap: _propTypes.default.func,
  getStyle: _propTypes.default.func,
  loadGeoJson: _propTypes.default.func,
  overrideStyle: _propTypes.default.func,
  remove: _propTypes.default.func,
  revertStyle: _propTypes.default.func,
  setControlPosition: _propTypes.default.func,
  setControls: _propTypes.default.func,
  setDrawingMode: _propTypes.default.func,
  setMap: _propTypes.default.func,
  setStyle: _propTypes.default.func,
  toGeoJson: _propTypes.default.func
};
var GoogleMapInterface = {
  fitBounds: _propTypes.default.func,
  getBounds: _propTypes.default.func,
  getCenter: _propTypes.default.func,
  getClicableIcons: _propTypes.default.func,
  // , // WTF
  getDiv: _propTypes.default.func,
  getHeading: _propTypes.default.func,
  getMapTypeId: _propTypes.default.func,
  getProjection: _propTypes.default.func,
  getTilt: _propTypes.default.func,
  getZoom: _propTypes.default.func,
  panBy: _propTypes.default.func,
  panTo: _propTypes.default.func,
  panToBounds: _propTypes.default.func,
  setCenter: _propTypes.default.func,
  setClickableIcons: _propTypes.default.func,
  setHeading: _propTypes.default.func,
  setMapTypeId: _propTypes.default.func,
  setOptions: _propTypes.default.func,
  setStreetView: _propTypes.default.func,
  setTilt: _propTypes.default.func,
  setZoom: _propTypes.default.func,
  controls: _propTypes.default.arrayOf(_propTypes.default.shape(MVCArrayInterface)),
  data: _propTypes.default.shape(DataInterface),
  mapTypes: _propTypes.default.shape(MapTypeRegistryInterface),
  overlayMapTypes: _propTypes.default.shape(MVCArrayInterface)
};
var RectangleOptionsInterface = {
  bounds: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngBoundsInterface), _propTypes.default.shape(LatLngBoundsLiteralInterface)]),
  clickable: _propTypes.default.bool,
  draggable: _propTypes.default.bool,
  editable: _propTypes.default.bool,
  fillColor: _propTypes.default.string,
  fillOpacity: _propTypes.default.number,
  map: _propTypes.default.shape(GoogleMapInterface),
  strokeColor: _propTypes.default.string,
  strokeOpacity: _propTypes.default.number,
  strokePosition: _propTypes.default.oneOf(['CENTER', 'INSIDE', 'OUTSIDE']),
  strokeWeight: _propTypes.default.number,
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.number
};
var MapTypeStyleInterface = {
  elementType: _propTypes.default.string,
  featureType: _propTypes.default.string,
  stylers: _propTypes.default.arrayOf(_propTypes.default.object // TODO
  )
};
var IconInterface = {
  anchor: _propTypes.default.shape(PointInterface),
  labelOrigin: _propTypes.default.shape(PointInterface),
  origin: _propTypes.default.shape(PointInterface),
  scaledSize: _propTypes.default.shape(SizeInterface),
  size: _propTypes.default.shape(SizeInterface),
  url: _propTypes.default.string
};
var IconSequenceInterface = {
  fixedRotation: _propTypes.default.bool,
  icon: _propTypes.default.shape(SymbolInterface),
  offset: _propTypes.default.string,
  repeat: _propTypes.default.string
};
var StreetViewPanoramaOptionsInterface = {
  addressControl: _propTypes.default.bool,
  addressControlOptions: _propTypes.default.shape(StreetViewAddressControlOptionsInterface),
  clickToGo: _propTypes.default.bool,
  disableDefaultUI: _propTypes.default.bool,
  disableDoubleClickZoom: _propTypes.default.bool,
  enableCloseButton: _propTypes.default.bool,
  fullscreenControl: _propTypes.default.bool,
  fullscreenControlOptions: _propTypes.default.shape(FullscreenControlOptionsInterface),
  imageDateControl: _propTypes.default.bool,
  linksControl: _propTypes.default.bool,
  motionTracking: _propTypes.default.bool,
  motionTrackingControl: _propTypes.default.bool,
  motionTrackingControlOptions: _propTypes.default.shape(MotionTrackingControlOptionsInterface),
  panControl: _propTypes.default.bool,
  panControlOptions: _propTypes.default.shape(PanControlOptionsInterface),
  pano: _propTypes.default.string,
  position: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]),
  pov: _propTypes.default.shape(StreetViewPovInterface),
  scrollwheel: _propTypes.default.bool,
  showRoadLabels: _propTypes.default.bool,
  visible: _propTypes.default.bool,
  zoom: _propTypes.default.number,
  zoomControl: _propTypes.default.bool,
  zoomControlOptions: _propTypes.default.shape(ZoomControlOptionsInterface)
};
var StreetViewPanoramaInterface = {
  options: _propTypes.default.shape(StreetViewPanoramaOptionsInterface),
  onCloseclick: _propTypes.default.func,
  onPanoChanged: _propTypes.default.func,
  onPositionChanged: _propTypes.default.func,
  onPovChanged: _propTypes.default.func,
  onResize: _propTypes.default.func,
  onStatusChanged: _propTypes.default.func,
  onVisibleChanged: _propTypes.default.func,
  onZoomChanged: _propTypes.default.func,
  getLinks: _propTypes.default.func,
  getLocation: _propTypes.default.func,
  getMotionTracking: _propTypes.default.func,
  getPano: _propTypes.default.func,
  getPhotographerPov: _propTypes.default.func,
  getPosition: _propTypes.default.func,
  getPov: _propTypes.default.func,
  getStatus: _propTypes.default.func,
  getVisible: _propTypes.default.func,
  getZoom: _propTypes.default.func,
  registerPanoProvider: _propTypes.default.func,
  setLinks: _propTypes.default.func,
  setMotionTracking: _propTypes.default.func,
  setOptions: _propTypes.default.func,
  setPano: _propTypes.default.func,
  setPosition: _propTypes.default.func,
  setPov: _propTypes.default.func,
  setVisible: _propTypes.default.func,
  setZoom: _propTypes.default.func,
  controls: _propTypes.default.arrayOf(_propTypes.default.shape(MVCArrayInterface))
};
var GoogleMapOptionsInterface = {
  backgroundColor: _propTypes.default.string,
  center: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]),
  clickableIcons: _propTypes.default.bool,
  disableDefaultUI: _propTypes.default.bool,
  disableDoubleClickZoom: _propTypes.default.bool,
  draggable: _propTypes.default.bool,
  draggableCursor: _propTypes.default.string,
  draggingCursor: _propTypes.default.string,
  fullscreenControl: _propTypes.default.bool,
  fullscreenControlOptions: _propTypes.default.shape(FullscreenControlOptionsInterface),
  gestureHandling: _propTypes.default.string,
  heading: _propTypes.default.number,
  keyboardShortcuts: _propTypes.default.bool,
  mapTypeControl: _propTypes.default.bool,
  mapTypeControlOptions: _propTypes.default.shape(MapTypeControlOptionsInterface),
  mapTypeId: _propTypes.default.string,
  maxZoom: _propTypes.default.number,
  minZoom: _propTypes.default.number,
  noClear: _propTypes.default.bool,
  panControl: _propTypes.default.bool,
  panControlOptions: _propTypes.default.shape(PanControlOptionsInterface),
  rotateControl: _propTypes.default.bool,
  rotateControlOptions: _propTypes.default.shape(RotateControlOptionsInterface),
  scaleControl: _propTypes.default.bool,
  scaleControlOptions: _propTypes.default.shape(ScaleControlOptionsInterface),
  scrollwheel: _propTypes.default.bool,
  streetView: _propTypes.default.shape(StreetViewPanoramaInterface),
  streetViewControl: _propTypes.default.bool,
  streetViewControlOptions: _propTypes.default.shape(StreetViewControlOptionsInterface),
  styles: _propTypes.default.arrayOf(_propTypes.default.shape(MapTypeStyleInterface)),
  tilt: _propTypes.default.number,
  zoom: _propTypes.default.number,
  zoomControl: _propTypes.default.bool,
  zoomControlOptions: _propTypes.default.shape(ZoomControlOptionsInterface)
};
var TrafficLayerOptionsInterface = {
  autoRefresh: _propTypes.default.bool,
  map: _propTypes.default.shape(GoogleMapInterface)
};

var PathInterface = _propTypes.default.oneOfType([_propTypes.default.shape(MVCArrayInterface), _propTypes.default.arrayOf(_propTypes.default.shape(LatLngInterface)), _propTypes.default.arrayOf(_propTypes.default.shape(LatLngLiteralInterface))]);

var MarkerOptionsInterface = {
  anchorPoint: _propTypes.default.shape(PointInterface),
  animation: _propTypes.default.string,
  // Animation constants
  clickable: _propTypes.default.bool,
  crossOnDrag: _propTypes.default.bool,
  cursor: _propTypes.default.string,
  draggable: _propTypes.default.bool,
  icon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape(IconInterface)])
};
var InfoWindowOptionsInterface = {
  content: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  disableAutoPan: _propTypes.default.bool,
  maxWidth: _propTypes.default.number,
  pixelOffset: _propTypes.default.shape(SizeInterface),
  position: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]),
  zIndex: _propTypes.default.number
};
var InfoWindowInterface = {
  close: _propTypes.default.func,
  getContent: _propTypes.default.func,
  getPosition: _propTypes.default.func,
  getZIndex: _propTypes.default.func,
  open: _propTypes.default.func,
  setContent: _propTypes.default.func,
  setOptions: _propTypes.default.func,
  setPosition: _propTypes.default.func,
  setZIndex: _propTypes.default.func,
  onCloseClick: _propTypes.default.func,
  onContentChanged: _propTypes.default.func,
  onDomReady: _propTypes.default.func,
  onPositionChanged: _propTypes.default.func,
  onZindexChanged: _propTypes.default.func
};
var PolylineOptionsInterface = {
  clickable: _propTypes.default.bool,
  draggable: _propTypes.default.bool,
  editable: _propTypes.default.bool,
  geodesic: _propTypes.default.bool,
  icons: _propTypes.default.arrayOf(_propTypes.default.shape(IconSequenceInterface)),
  map: _propTypes.default.shape(GoogleMapInterface),
  path: PathInterface,
  strokeColor: _propTypes.default.string,
  strokeOpacity: _propTypes.default.number,
  strokeWeight: _propTypes.default.number,
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.number
};
var PolygonOptionsInterface = {
  clickable: _propTypes.default.backgroundColor,
  draggable: _propTypes.default.backgroundColor,
  editable: _propTypes.default.backgroundColor,
  fillColor: _propTypes.default.stringbackgroundColor,
  fillOpacity: _propTypes.default.numberbackgroundColor,
  geodesic: _propTypes.default.backgroundColor,
  map: _propTypes.default.shape(GoogleMapInterface),
  paths: _propTypes.default.oneOfType([_propTypes.default.shape(MVCArrayInterface), _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]))), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]))]),
  strokeColor: _propTypes.default.string,
  strokeOpacity: _propTypes.default.number,
  strokePosition: _propTypes.default.oneOf(['CENTER', 'INSIDE', 'OUTSIDE']),
  strokeWeight: _propTypes.default.number,
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.number
};
var CircleOptionsInterface = {
  center: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]),
  clickable: _propTypes.default.bool,
  draggable: _propTypes.default.bool,
  editable: _propTypes.default.bool,
  fillColor: _propTypes.default.string,
  fillOpacity: _propTypes.default.number,
  map: _propTypes.default.shape(GoogleMapInterface),
  radius: _propTypes.default.number,
  strokeColor: _propTypes.default.string,
  strokeOpacity: _propTypes.default.number,
  strokePosition: _propTypes.default.oneOf(['CENTER', 'INSIDE', 'OUTSIDE']),
  strokeWeight: _propTypes.default.number,
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.number
};
var KmlLayerOptionsInterface = {
  clickable: _propTypes.default.bool,
  map: _propTypes.default.shape(GoogleMapInterface),
  preserveViewport: _propTypes.default.bool,
  screenOverlays: _propTypes.default.bool,
  suppressInfoWindows: _propTypes.default.bool,
  url: _propTypes.default.string,
  zIndex: _propTypes.default.number
};
var MarkerShapeInterface = {
  coords: _propTypes.default.arrayOf(_propTypes.default.number),
  type: _propTypes.default.string
};
var DataStyleOptionsInterface = {
  clickable: _propTypes.default.bool,
  cursor: _propTypes.default.string,
  draggable: _propTypes.default.bool,
  editable: _propTypes.default.bool,
  fillColor: _propTypes.default.string,
  fillOpacity: _propTypes.default.number,
  icon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape(IconInterface), _propTypes.default.shape(SymbolInterface)]),
  shape: _propTypes.default.shape(MarkerShapeInterface),
  strokeColor: _propTypes.default.string,
  strokeOpacity: _propTypes.default.number,
  strokeWeight: _propTypes.default.number,
  title: _propTypes.default.string,
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.number
};
var DataOptionsInterface = {
  controlPosition: _propTypes.default.object,
  // ControlPosition constants
  controls: _propTypes.default.arrayOf(_propTypes.default.string),
  drawingMode: _propTypes.default.string,
  featureFactory: _propTypes.default.func,
  map: _propTypes.default.shape(GoogleMapInterface),
  style: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape(DataStyleOptionsInterface)])
};
var FusionTablesHeatmapInterface = {
  enabled: _propTypes.default.bool
};
var FusionTablesQueryInterface = {
  from: _propTypes.default.string,
  limit: _propTypes.default.number,
  offset: _propTypes.default.number,
  orderBy: _propTypes.default.string,
  select: _propTypes.default.string,
  where: _propTypes.default.string
};
var FusionTablesMarkerOptionsInterface = {
  iconName: _propTypes.default.string
};
var FusionTablesPolygonOptionsInterface = {
  fillColor: _propTypes.default.string,
  fillOpacity: _propTypes.default.number,
  strokeColor: _propTypes.default.string,
  strokeOpacity: _propTypes.default.number,
  strokeWeight: _propTypes.default.number
};
var FusionTablesPolylineOptionsInterface = {
  strokeColor: _propTypes.default.string,
  strokeOpacity: _propTypes.default.number,
  strokeWeight: _propTypes.default.number
};
var FusionTablesStyleInterface = {
  markerOptions: _propTypes.default.shape(FusionTablesMarkerOptionsInterface),
  polygonOptions: _propTypes.default.shape(FusionTablesPolygonOptionsInterface),
  polylineOptions: _propTypes.default.shape(FusionTablesPolylineOptionsInterface),
  where: _propTypes.default.string
};
var FusionTablesLayerOptionsInterface = {
  clickable: _propTypes.default.bool,
  heatmap: _propTypes.default.shape(FusionTablesHeatmapInterface),
  map: _propTypes.default.shape(GoogleMapInterface),
  query: _propTypes.default.shape(FusionTablesQueryInterface),
  styles: _propTypes.default.arrayOf(FusionTablesStyleInterface),
  suppressInfoWindows: _propTypes.default.bool
};
var ImageMapTypeOptionsInterface = {
  alt: _propTypes.default.string,
  getTileUrl: _propTypes.default.func,
  maxZoom: _propTypes.default.number,
  minZoom: _propTypes.default.number,
  name: _propTypes.default.string,
  opacity: _propTypes.default.number,
  tileSize: _propTypes.default.shape(SizeInterface)
};
var GroundOverlayOptionsInterface = {
  clickable: _propTypes.default.bool,
  // map prop is merged inside the component
  // map: PropTypes.shape(
  //   GoogleMapInterface
  // ),
  opacity: _propTypes.default.number
};
var HeatmapLayerOptionsInterface = {
  data: _propTypes.default.shape(MVCArrayInterface),
  dissipating: _propTypes.default.bool,
  gradient: _propTypes.default.arrayOf(_propTypes.default.string),
  map: _propTypes.default.shape(GoogleMapInterface),
  maxIntensity: _propTypes.default.number,
  opacity: _propTypes.default.number,
  radius: _propTypes.default.number
};
var ComponentRestrictionsInterface = {
  country: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)])
};
var AutocompleteOptionsInterface = {
  bounds: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngBoundsInterface), _propTypes.default.shape(LatLngBoundsLiteralInterface)]),
  componentRestrictions: _propTypes.default.shape(ComponentRestrictionsInterface),
  fields: _propTypes.default.arrayOf(_propTypes.default.string),
  placeIdOnly: _propTypes.default.bool,
  strictBounds: _propTypes.default.bool,
  types: _propTypes.default.arrayOf(_propTypes.default.string)
};
var SearchBoxOptionsInterface = {
  bounds: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngBoundsInterface), _propTypes.default.shape(LatLngBoundsLiteralInterface)])
};
var TimeInterface = {
  text: _propTypes.default.string,
  time_zone: _propTypes.default.string,
  value: _propTypes.default.string
};
var DistanceInterface = {
  text: _propTypes.default.string,
  value: _propTypes.default.number
};
var DurationInterface = {
  text: _propTypes.default.string,
  value: _propTypes.default.number
};
var TransitStopInterface = {
  location: _propTypes.default.shape(LatLngInterface),
  name: _propTypes.default.string
};
var TransitAgencyInterface = {
  name: _propTypes.default.string,
  phone: _propTypes.default.string,
  url: _propTypes.default.string
};
var TransitVehicleInterface = {
  icon: _propTypes.default.string,
  local_icon: _propTypes.default.string,
  name: _propTypes.default.string,
  type: _propTypes.default.oneOf(['BUS', 'CABLE_CAR', 'COMMUTER_TRAIN', 'FERRY', 'FUNICULAR', 'GONDOLA_LIFT', 'HEAVY_RAIL', 'HIGH_SPEED_TRAIN', 'INTERCITY_BUS', 'METRO_RAIL', 'MONORAIL', 'OTHER', 'RAIL', 'SHARE_TAXI', 'SUBWAY', 'TRAM', 'TROLLEYBUS'])
};
var TransitLineInterface = {
  agencies: _propTypes.default.arrayOf(_propTypes.default.shape(TransitAgencyInterface)),
  color: _propTypes.default.string,
  icon: _propTypes.default.string,
  name: _propTypes.default.string,
  short_name: _propTypes.default.string,
  text_color: _propTypes.default.string,
  url: _propTypes.default.string,
  vehicle: _propTypes.default.shape(TransitVehicleInterface)
};
var TransitDetailsInterface = {
  arrival_stop: _propTypes.default.shape(TransitStopInterface),
  arrival_time: _propTypes.default.shape(TimeInterface),
  departure_stop: _propTypes.default.shape(TransitStopInterface),
  departure_time: _propTypes.default.shape(TimeInterface),
  headsign: _propTypes.default.string,
  headway: _propTypes.default.number,
  line: _propTypes.default.shape(TransitLineInterface),
  num_stops: _propTypes.default.number
};
var DirectionsStepInterface = {
  distance: _propTypes.default.shape(DistanceInterface),
  duration: _propTypes.default.shape(DurationInterface),
  end_location: _propTypes.default.shape(LatLngInterface),
  instructions: _propTypes.default.string,
  path: _propTypes.default.arrayOf(_propTypes.default.shape(LatLngInterface)),
  start_location: _propTypes.default.shape(LatLngInterface),
  steps: _propTypes.default.arrayOf(_propTypes.default.shape( // eslint-disable-next-line babel/no-invalid-this
  void 0)),
  transit: _propTypes.default.shape(TransitDetailsInterface),
  travel_mode: _propTypes.default.string // TravelMode constants

};
var DirectionsLegInterface = {
  arrival_time: _propTypes.default.shape(TimeInterface),
  departure_time: _propTypes.default.shape(TimeInterface),
  distance: _propTypes.default.shape(DistanceInterface),
  duration: _propTypes.default.shape(DurationInterface),
  duration_in_traffic: _propTypes.default.shape(DurationInterface),
  end_address: _propTypes.default.string,
  end_location: _propTypes.default.shape(LatLngInterface),
  start_address: _propTypes.default.string,
  start_location: _propTypes.default.shape(LatLngInterface),
  steps: _propTypes.default.arrayOf(_propTypes.default.shape(DirectionsStepInterface)),
  via_waypoints: _propTypes.default.arrayOf(_propTypes.default.shape(LatLngInterface))
};
var TransitFareInterface = {
  currency: _propTypes.default.string,
  value: _propTypes.default.number
};
var DirectionsRouteInterface = {
  bounds: _propTypes.default.shape(LatLngBoundsInterface),
  copyrights: _propTypes.default.string,
  fare: _propTypes.default.shape(TransitFareInterface),
  legs: _propTypes.default.arrayOf(_propTypes.default.shape(DirectionsLegInterface)),
  overview_path: _propTypes.default.arrayOf(_propTypes.default.shape(LatLngInterface)),
  overview_polyline: _propTypes.default.string,
  warnings: _propTypes.default.arrayOf(_propTypes.default.string),
  waypoint_order: _propTypes.default.arrayOf(_propTypes.default.number)
};
var DirectionsGeocodedWaypointInterface = {
  partial_match: _propTypes.default.bool,
  place_id: _propTypes.default.string,
  types: _propTypes.default.arrayOf(_propTypes.default.string)
};
var DirectionsResultInterface = {
  geocoded_waypoints: _propTypes.default.arrayOf(_propTypes.default.shape(DirectionsGeocodedWaypointInterface)),
  routes: _propTypes.default.arrayOf(_propTypes.default.shape(DirectionsRouteInterface))
};
var DirectionsRendererOptionsInterface = {
  directions: _propTypes.default.shape(DirectionsResultInterface),
  draggable: _propTypes.default.bool,
  hideRouteList: _propTypes.default.bool,
  infoWindow: _propTypes.default.shape(InfoWindowInterface),
  map: _propTypes.default.shape(GoogleMapInterface),
  markerOptions: _propTypes.default.shape(MarkerOptionsInterface),
  panel: _propTypes.default.node,
  polylineOptions: _propTypes.default.shape(PolylineOptionsInterface),
  preserveViewport: _propTypes.default.bool,
  routeIndex: _propTypes.default.number,
  suppressBicyclingLayer: _propTypes.default.bool,
  suppressInfoWindows: _propTypes.default.bool,
  suppressMarkers: _propTypes.default.bool,
  suppressPolylines: _propTypes.default.bool
};
var DrawingControlOptionsInterface = {
  drawingModes: _propTypes.default.arrayOf(_propTypes.default.string),
  position: _propTypes.default.oneOf(['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', 'LEFT_BOTTOM', 'LEFT_CENTER', 'LEFT_TOP', 'RIGHT_BOTTOM', 'RIGHT_CENTER', 'RIGHT_TOP', 'TOP_CENTER', 'TOP_LEFT', 'TOP_RIGHT'])
};
var DrawingManagerOptionsInterface = {
  circleOptions: _propTypes.default.shape(CircleOptionsInterface),
  drawingControl: _propTypes.default.bool,
  drawingControlOptions: _propTypes.default.shape(DrawingControlOptionsInterface),
  drawingMode: _propTypes.default.oneOf(['CIRCLE', 'MARKER', 'POLYGON', 'POLYLINE', 'RECTANGLE']),
  map: _propTypes.default.shape(GoogleMapInterface),
  markerOptions: _propTypes.default.shape(MarkerOptionsInterface),
  polygonOptions: _propTypes.default.shape(PolygonOptionsInterface),
  polylineOptions: _propTypes.default.shape(PolylineOptionsInterface),
  rectangleOptions: _propTypes.default.shape(RectangleOptionsInterface)
};
var DrivingOptionsInterface = {
  departureTime: _propTypes.default.instanceOf(Date),
  trafficModel: _propTypes.default.oneOf(['BEST_GUESS', 'OPTIMISTIC', 'PESSIMISTIC'])
};
var TransitOptionsInterface = {
  arrivalTime: _propTypes.default.instanceOf(Date),
  departureTime: _propTypes.default.instanceOf(Date),
  modes: _propTypes.default.arrayOf(_propTypes.default.oneOf(['BUS', 'RAIL', 'SUBWAY', 'TRAIN', 'TRAM'])),
  routingPreference: _propTypes.default.oneOf(['FEWER_TRANSFERS', 'LESS_WALKING'])
};
var DirectionsWaypointInterface = {
  location: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape(LatLngInterface), _propTypes.default.shape(PlaceInterface)]),
  stopover: _propTypes.default.bool
};
var DirectionsRequestInterface = {
  avoidFerries: _propTypes.default.bool,
  avoidHighways: _propTypes.default.bool,
  avoidTolls: _propTypes.default.bool,
  destination: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape(LatLngInterface), _propTypes.default.shape(PlaceInterface), _propTypes.default.shape(LatLngLiteralInterface)]).isRequired,
  // required
  drivingOptions: _propTypes.default.shape(DrivingOptionsInterface),
  optimizeWaypoints: _propTypes.default.bool,
  origin: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape(LatLngInterface), _propTypes.default.shape(PlaceInterface), _propTypes.default.shape(LatLngLiteralInterface)]).isRequired,
  // required
  provideRouteAlternatives: _propTypes.default.bool,
  region: _propTypes.default.string,
  transitOptions: _propTypes.default.shape(TransitOptionsInterface),
  travelMode: _propTypes.default.oneOf(['BICYCLING', 'DRIVING', 'TRANSIT', 'WALKING']).isRequired,
  // required
  unitSystem: _propTypes.default.oneOf(['IMPERIAL', 'METRIC']),
  waypoints: _propTypes.default.arrayOf(_propTypes.default.shape(DirectionsWaypointInterface))
};
var PolylinePropTypes = {
  options: _propTypes.default.shape(PolylineOptionsInterface),
  draggable: _propTypes.default.bool,
  editable: _propTypes.default.bool,
  path: PathInterface,
  visible: _propTypes.default.bool,
  onDblClick: _propTypes.default.func,
  onDragEnd: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseMove: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onDrag: _propTypes.default.func
};
exports.PolylinePropTypes = PolylinePropTypes;
var PolygonPropTypes = {
  options: _propTypes.default.shape(PolygonOptionsInterface),
  draggable: _propTypes.default.bool,
  editable: _propTypes.default.bool,
  path: _propTypes.default.any,
  // TODO
  paths: _propTypes.default.any,
  // TODO
  visible: _propTypes.default.bool,
  onDblClick: _propTypes.default.func,
  onDragEnd: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseMove: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onDrag: _propTypes.default.func
};
exports.PolygonPropTypes = PolygonPropTypes;
var RectanglePropTypes = {
  options: _propTypes.default.shape(RectangleOptionsInterface),
  bounds: _propTypes.default.any,
  // TODO
  draggable: _propTypes.default.bool,
  editable: _propTypes.default.bool,
  visible: _propTypes.default.bool,
  onDblClick: _propTypes.default.func,
  onDragEnd: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseMove: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onBoundsChanged: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onDrag: _propTypes.default.func
};
exports.RectanglePropTypes = RectanglePropTypes;
var CirclePropTypes = {
  options: _propTypes.default.shape(CircleOptionsInterface),
  center: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]),
  draggable: _propTypes.default.bool,
  editable: _propTypes.default.bool,
  radius: _propTypes.default.number,
  visible: _propTypes.default.bool,
  onDblClick: _propTypes.default.func,
  onDragEnd: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseMove: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onCenterChanged: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onDrag: _propTypes.default.func,
  onRadiusChanged: _propTypes.default.func
};
exports.CirclePropTypes = CirclePropTypes;
var DataPropTypes = {
  options: _propTypes.default.shape(DataOptionsInterface),
  onAddFeature: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onDblClick: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onRemoveFeature: _propTypes.default.func,
  onRemoveProperty: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onSetGeometry: _propTypes.default.func,
  onSetProperty: _propTypes.default.func
};
exports.DataPropTypes = DataPropTypes;
var OverlayViewPropTypes = {
  mapPaneName: _propTypes.default.string,
  children: _propTypes.default.node,
  position: _propTypes.default.object,
  bounds: _propTypes.default.object,
  getPixelPositionOffset: _propTypes.default.func
};
exports.OverlayViewPropTypes = OverlayViewPropTypes;
var KmlLayerPropTypes = {
  options: _propTypes.default.shape(KmlLayerOptionsInterface),
  url: _propTypes.default.string,
  zIndex: _propTypes.default.number,
  onDefaultViewportChanged: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onStatusChanged: _propTypes.default.func
};
exports.KmlLayerPropTypes = KmlLayerPropTypes;
var FusionTablesLayerPropTypes = {
  options: _propTypes.default.shape(FusionTablesLayerOptionsInterface),
  onClick: _propTypes.default.func
};
exports.FusionTablesLayerPropTypes = FusionTablesLayerPropTypes;
var ImageMapTypePropTypes = {
  options: _propTypes.default.shape(ImageMapTypeOptionsInterface),
  onTilesLoaded: _propTypes.default.func
};
exports.ImageMapTypePropTypes = ImageMapTypePropTypes;
var AutocompletePropTypes = {
  inputField: _propTypes.default.node.isRequired,
  options: _propTypes.default.shape(AutocompleteOptionsInterface),
  onPlaceChanged: _propTypes.default.func
};
exports.AutocompletePropTypes = AutocompletePropTypes;
var SearchBoxPropTypes = {
  options: _propTypes.default.shape(SearchBoxOptionsInterface),
  children: _propTypes.default.node,
  controlPosition: _propTypes.default.number,
  bounds: _propTypes.default.any,
  // TODO
  onPlacesChanged: _propTypes.default.func
};
exports.SearchBoxPropTypes = SearchBoxPropTypes;
var DrawingManagerPropTypes = {
  options: _propTypes.default.shape(DrawingManagerOptionsInterface),
  drawingMode: _propTypes.default.any,
  // TODO
  onCircleComplete: _propTypes.default.func,
  onMarkerComplete: _propTypes.default.func,
  onOverlayComplete: _propTypes.default.func,
  onPolygonComplete: _propTypes.default.func,
  onPolylineComplete: _propTypes.default.func,
  onRectangleComplete: _propTypes.default.func
};
exports.DrawingManagerPropTypes = DrawingManagerPropTypes;
var InfoWindowPropTypes = {
  children: _propTypes.default.node,
  options: _propTypes.default.shape(InfoWindowOptionsInterface),
  position: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]).isRequired,
  zIndex: _propTypes.default.number,
  onCloseClick: _propTypes.default.func,
  onDomReady: _propTypes.default.func,
  onContentChanged: _propTypes.default.func,
  onPositionChanged: _propTypes.default.func,
  onZindexChanged: _propTypes.default.func
};
exports.InfoWindowPropTypes = InfoWindowPropTypes;
var InfoBoxPropTypes = {
  options: _propTypes.default.any,
  // TODO
  children: _propTypes.default.node,
  position: _propTypes.default.any,
  // TODO
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.number,
  onCloseClick: _propTypes.default.func,
  onDomReady: _propTypes.default.func,
  onContentChanged: _propTypes.default.func,
  onPositionChanged: _propTypes.default.func,
  onZindexChanged: _propTypes.default.func
};
exports.InfoBoxPropTypes = InfoBoxPropTypes;
var HeatmapLayerPropTypes = {
  options: _propTypes.default.shape(HeatmapLayerOptionsInterface),
  data: _propTypes.default.any // TODO

};
exports.HeatmapLayerPropTypes = HeatmapLayerPropTypes;
var StreetViewPanoramaPropTypes = {
  options: _propTypes.default.shape(StreetViewPanoramaOptionsInterface),
  children: _propTypes.default.node,
  links: _propTypes.default.any,
  // TODO
  motionTracking: _propTypes.default.bool,
  pano: _propTypes.default.string,
  position: _propTypes.default.any,
  // TODO
  pov: _propTypes.default.any,
  // TODO
  visible: _propTypes.default.bool,
  zoom: _propTypes.default.number,
  onCloseClick: _propTypes.default.func,
  onPanoChanged: _propTypes.default.func,
  onPositionChanged: _propTypes.default.func,
  onPovChanged: _propTypes.default.func,
  onResize: _propTypes.default.func,
  onStatusChanged: _propTypes.default.func,
  onVisibleChanged: _propTypes.default.func,
  onZoomChanged: _propTypes.default.func
};
exports.StreetViewPanoramaPropTypes = StreetViewPanoramaPropTypes;
var MarkerPropTypes = {
  children: _propTypes.default.node,
  options: _propTypes.default.shape(MarkerOptionsInterface),
  noRedraw: _propTypes.default.func,
  animation: _propTypes.default.any,
  // TODO
  clickable: _propTypes.default.bool,
  cursor: _propTypes.default.string,
  draggable: _propTypes.default.bool,
  icon: _propTypes.default.any,
  // TODO
  label: _propTypes.default.any,
  // TODO
  opacity: _propTypes.default.number,
  position: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngInterface), _propTypes.default.shape(LatLngLiteralInterface)]),
  shape: _propTypes.default.any,
  // TODO
  title: _propTypes.default.string,
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.number,
  onDblClick: _propTypes.default.func,
  onDragEnd: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onAnimationChanged: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onClickableChanged: _propTypes.default.func,
  onCursorChanged: _propTypes.default.func,
  onDrag: _propTypes.default.func,
  onDraggableChanged: _propTypes.default.func,
  onFlatChanged: _propTypes.default.func,
  onIconChanged: _propTypes.default.func,
  onPositionChanged: _propTypes.default.func,
  onShapeChanged: _propTypes.default.func,
  onTitleChanged: _propTypes.default.func,
  onVisibleChanged: _propTypes.default.func,
  onZindexChanged: _propTypes.default.func
};
exports.MarkerPropTypes = MarkerPropTypes;
var MarkerClusterPropTypes = {
  children: _propTypes.default.node,
  averageCenter: _propTypes.default.bool,
  batchSizeIE: _propTypes.default.number,
  batchSize: _propTypes.default.number,
  calculator: _propTypes.default.func,
  clusterClass: _propTypes.default.string,
  enableRetinaIcons: _propTypes.default.bool,
  gridSize: _propTypes.default.number,
  ignoreHidden: _propTypes.default.bool,
  imageExtension: _propTypes.default.string,
  imagePath: _propTypes.default.string,
  imageSizes: _propTypes.default.array,
  maxZoom: _propTypes.default.number,
  minimumClusterSize: _propTypes.default.number,
  styles: _propTypes.default.array,
  title: _propTypes.default.string,
  zoomOnClick: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  onClusteringBegin: _propTypes.default.func,
  onClusteringEnd: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func
};
exports.MarkerClusterPropTypes = MarkerClusterPropTypes;
var MarkerWithLabelPropTypes = {
  children: _propTypes.default.node,
  labelAnchor: _propTypes.default.object,
  labelClass: _propTypes.default.string,
  labelStyle: _propTypes.default.object,
  labelVisible: _propTypes.default.bool,
  noRedraw: _propTypes.default.bool,
  animation: _propTypes.default.any,
  // TODO
  clickable: _propTypes.default.bool,
  cursor: _propTypes.default.string,
  draggable: _propTypes.default.bool,
  icon: _propTypes.default.any,
  // TODO
  label: _propTypes.default.any,
  // TODO
  opacity: _propTypes.default.number,
  options: _propTypes.default.any,
  // TODO
  place: _propTypes.default.any,
  // TODO
  position: _propTypes.default.any,
  // TODO
  shape: _propTypes.default.any,
  // TODO
  title: _propTypes.default.string,
  visible: _propTypes.default.bool,
  zIndex: _propTypes.default.number,
  onDblClick: _propTypes.default.func,
  onDragEnd: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onAnimationChanged: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onClickableChanged: _propTypes.default.func,
  onCursorChanged: _propTypes.default.func,
  onDrag: _propTypes.default.func,
  onDraggableChanged: _propTypes.default.func,
  onFlatChanged: _propTypes.default.func,
  onIconChanged: _propTypes.default.func,
  onPositionChanged: _propTypes.default.func,
  onShapeChanged: _propTypes.default.func,
  onTitleChanged: _propTypes.default.func,
  onVisibleChanged: _propTypes.default.func,
  onZindexChanged: _propTypes.default.func
};
exports.MarkerWithLabelPropTypes = MarkerWithLabelPropTypes;
var BicyclingLayerPropTypes = {
  map: _propTypes.default.object
};
exports.BicyclingLayerPropTypes = BicyclingLayerPropTypes;
var TrafficLayerPropTypes = {
  options: _propTypes.default.shape(TrafficLayerOptionsInterface),
  map: _propTypes.default.object // it is null at initialization, so can't be required

};
exports.TrafficLayerPropTypes = TrafficLayerPropTypes;
var GroundOverlayPropTypes = {
  map: _propTypes.default.object,
  // it is null at initialization, so can't be required
  options: _propTypes.default.shape(GroundOverlayOptionsInterface),
  url: _propTypes.default.string,
  bounds: _propTypes.default.oneOfType([_propTypes.default.shape(LatLngBoundsInterface), _propTypes.default.shape(LatLngBoundsLiteralInterface)]).isRequired,
  opacity: _propTypes.default.number,
  onDblClick: _propTypes.default.func,
  onClick: _propTypes.default.func
};
exports.GroundOverlayPropTypes = GroundOverlayPropTypes;
var GoogleMapPropTypes = {
  id: _propTypes.default.string.isRequired,
  reuseSameInstance: _propTypes.default.bool,
  mapContainerStyle: _propTypes.default.object,
  mapContainerClassName: _propTypes.default.string,
  children: _propTypes.default.node,
  options: _propTypes.default.shape(GoogleMapOptionsInterface),
  extraMapTypes: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.any // TODO
  )),
  center: _propTypes.default.any,
  // TODO
  clickableIcons: _propTypes.default.bool,
  heading: _propTypes.default.number,
  mapTypeId: _propTypes.default.any,
  // TODO
  streetView: _propTypes.default.any,
  // TODO
  tilt: _propTypes.default.number,
  zoom: _propTypes.default.number,
  onDblClick: _propTypes.default.func,
  onDragEnd: _propTypes.default.func,
  onDragStart: _propTypes.default.func,
  onMapTypeIdChanged: _propTypes.default.func,
  onMouseMove: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onRightClick: _propTypes.default.func,
  onTilesLoaded: _propTypes.default.func,
  onBoundsChanged: _propTypes.default.func,
  onCenterChanged: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onDrag: _propTypes.default.func,
  onHeadingChanged: _propTypes.default.func,
  onIdle: _propTypes.default.func,
  onProjectionChanged: _propTypes.default.func,
  onResize: _propTypes.default.func,
  onTiltChanged: _propTypes.default.func,
  onZoomChanged: _propTypes.default.func,
  onLoad: _propTypes.default.func
};
exports.GoogleMapPropTypes = GoogleMapPropTypes;
var LoadScriptPropTypes = {
  children: _propTypes.default.node.isRequired,
  id: _propTypes.default.string.isRequired,
  googleMapsApiKey: _propTypes.default.string.isRequired,
  language: _propTypes.default.string.isRequired,
  region: _propTypes.default.string.isRequired,
  version: _propTypes.default.string.isRequired,
  loadingElement: _propTypes.default.element.isRequired,
  onLoad: _propTypes.default.func,
  onError: _propTypes.default.func,
  onUnmount: _propTypes.default.func,
  libraries: _propTypes.default.arrayOf(_propTypes.default.string).isRequired
};
exports.LoadScriptPropTypes = LoadScriptPropTypes;
var DirectionsRendererPropTypes = {
  options: _propTypes.default.shape(DirectionsRendererOptionsInterface),
  directions: _propTypes.default.any,
  // TODO
  panel: _propTypes.default.any,
  // TODO
  routeIndex: _propTypes.default.number,
  onDirectionsChanged: _propTypes.default.func
};
exports.DirectionsRendererPropTypes = DirectionsRendererPropTypes;
var DirectionsServicePropTypes = {
  options: _propTypes.default.shape(DirectionsRequestInterface).isRequired,
  callback: _propTypes.default.func.isRequired
};
exports.DirectionsServicePropTypes = DirectionsServicePropTypes;