"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerEvents = registerEvents;
exports.unregisterEvents = unregisterEvents;
exports.applyUpdatersToPropsAndRegisterEvents = applyUpdatersToPropsAndRegisterEvents;

var _reduce = require("./reduce");

var _foreach = require("./foreach");

/* eslint-disable filenames/match-regex */

/* global google */
var applyUpdaterToNextProps = function applyUpdaterToNextProps(updaterMap, prevProps, nextProps, instance) {
  var map = {};

  var iter = function iter(fn, key) {
    var nextValue = nextProps[key];

    if (nextValue !== prevProps[key]) {
      map[key] = nextValue;
      fn(instance, nextValue);
    }
  };

  (0, _foreach.forEach)(updaterMap, iter);
  return map;
};

function registerEvents(props, instance, eventMap) {
  var registeredList = (0, _reduce.reduce)(eventMap, function (acc, googleEventName, onEventName) {
    if (typeof props[onEventName] === 'function') {
      acc.push(google.maps.event.addListener(instance, googleEventName, props[onEventName]));
    }

    return acc;
  }, []);
  return registeredList;
}

function unregisterEvents() {
  var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  events.map(unregisterEvent);
}

function unregisterEvent(registered) {
  google.maps.event.removeListener(registered);
}

function applyUpdatersToPropsAndRegisterEvents(_ref) {
  var updaterMap = _ref.updaterMap,
      eventMap = _ref.eventMap,
      prevProps = _ref.prevProps,
      nextProps = _ref.nextProps,
      instance = _ref.instance;
  applyUpdaterToNextProps(updaterMap, prevProps, nextProps, instance);
  return registerEvents(nextProps, instance, eventMap);
}