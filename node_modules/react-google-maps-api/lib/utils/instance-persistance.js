"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveInstance = exports.restoreInstance = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var clearChildren = function clearChildren(node) {
  if (node) {
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
  }
};

var getMapInstanceId = function getMapInstanceId(id) {
  return "google-map-".concat(id);
};

var getHiddenMapContainer = function getHiddenMapContainer(id) {
  var hiddenMapContainer = "hidden-container-".concat(id);
  var element = document.getElementById(hiddenMapContainer);

  if (!element) {
    element = document.createElement('div');
    element.id = hiddenMapContainer;
    element.style.display = 'none';
    document.body.appendChild(element);
  }

  return element;
};

var restoreInstance = function restoreInstance(_ref) {
  var id = _ref.id,
      zoom = _ref.zoom,
      center = _ref.center,
      mapContainerStyle = _ref.mapContainerStyle,
      options = _ref.options;
  var map = window[getMapInstanceId(id)];
  var hiddenContainer = getHiddenMapContainer(id);

  if (map && hiddenContainer.children.length === 1) {
    map.setZoom(zoom);
    map.setCenter(center);
    map.setOptions(_objectSpread({
      style: mapContainerStyle
    }, options));
    var mapContainer = document.getElementById(id);
    clearChildren(mapContainer);
    mapContainer.appendChild(hiddenContainer.children[0]);
    return map;
  }
};

exports.restoreInstance = restoreInstance;

var saveInstance = function saveInstance(id, map) {
  var hiddenContainer = getHiddenMapContainer(id);
  clearChildren(hiddenContainer);
  var mapContainer = document.getElementById(id);
  hiddenContainer.appendChild(mapContainer.children[0]);
  window[getMapInstanceId(id)] = map;
};

exports.saveInstance = saveInstance;