"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useMapComponent;

var _react = require("react");

var _mapContext = _interopRequireDefault(require("../map-context"));

var _helper = require("./helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useMapComponent(props) {
  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      instance = _useState2[0],
      setInstance = _useState2[1];

  var context = (0, _react.useContext)(_mapContext.default);
  var tempInstance;
  console.log({
    context: context
  });

  if (!instance) {
    console.log(props.className, new window.google.maps[props.className]());
    tempInstance = new window.google.maps[props.className]();
    setInstance(tempInstance);
    tempInstance.setMap(context);
  }

  console.log({
    tempInstance: tempInstance
  });
  (0, _react.useEffect)(function () {
    console.log(props, tempInstance);
    var registeredEvents = (0, _helper.applyUpdatersToPropsAndRegisterEvents)(_objectSpread({}, props, {
      instance: tempInstance
    }));
    return function () {
      (0, _helper.unregisterEvents)(registeredEvents);
    };
  });
  return 'was here';
}